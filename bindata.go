// Code generated for package main by go-bindata DO NOT EDIT. (@generated)
// sources:
// templates/launchd/launchd.plist.tmpl
// templates/runit/log/run.tmpl
// templates/runit/run.tmpl
// templates/systemd/default/control.target.tmpl
// templates/systemd/default/program.service.tmpl
// templates/systemd-user/default/program.service.tmpl
// templates/sysv/default/init.sh.tmpl
// templates/upstart/default/control.conf.tmpl
// templates/upstart/default/process-type.conf.tmpl
// templates/upstart/default/program.conf.tmpl
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesLaunchdLaunchdPlistTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x54\x5f\x8f\x9a\x40\x10\x7f\xf7\x53\x4c\x89\x8f\x85\xd5\xb7\xe6\x82\x5c\xec\x69\x93\x4b\x8d\x92\x53\xdb\xf4\xc9\xec\xc1\x1c\xb7\x11\x76\xe9\xec\xa2\x25\x84\xef\xde\x80\x70\xe2\x29\x97\x3e\xf4\x6d\x32\xf9\xfd\x9b\x61\x16\xf7\xfe\x4f\x12\xc3\x01\x49\x0b\x25\x27\xd6\xd8\x19\x59\x80\x32\x50\xa1\x90\xd1\xc4\xda\x6e\xbe\xd9\x5f\xac\x7b\x6f\xe0\x7e\x9a\xad\x1e\x36\xbf\xfc\x39\xa4\xb1\xd0\x06\xfc\xed\xd7\xc5\xe3\x03\x58\x36\x63\xd3\x34\x8d\x91\xb1\xd9\x66\x06\xfe\xe2\x71\xbd\x81\xb1\x33\x62\x6c\xbe\xb4\xc0\x7a\x35\x26\xbd\x63\xec\x78\x3c\x3a\xbc\x42\x39\x81\x4a\x2a\xa0\x66\x3e\xa9\x14\xc9\xe4\x0b\xa1\x8d\x3d\x76\x46\x4e\x68\x42\xcb\x1b\xb8\x27\xf5\x8b\x38\xde\xc0\x0d\x45\x60\xbc\x01\x00\x80\xbb\xc7\xdc\x5b\xf0\x67\x8c\x5d\x56\x95\xa7\xa6\x36\x24\x64\xe4\x15\x05\x54\x3e\x50\x96\x76\x55\xa6\xa4\x02\xd4\x7a\x67\xf2\x14\xdb\x9e\xcc\x12\x28\x4b\x97\x35\x8c\xb3\xe6\x5c\x1e\x04\x29\x99\xa0\x34\x3f\x38\x09\xfe\x1c\xa3\xee\x5a\x9c\x23\xbc\x51\xfc\xd5\xd3\xa6\x03\x79\x9f\x24\x55\x64\xae\xbc\xce\xe4\xf5\x47\x54\x7d\x45\x2c\x0a\x1b\x88\xcb\x08\x61\xb8\xc7\xfc\x33\x0c\x0f\x3c\xce\x10\xee\x26\xe0\xa0\x3c\x40\x59\x5e\xca\x17\x45\x8d\xab\x65\xfa\x6c\x1a\x89\x8e\x53\x51\x00\xca\xb0\x15\x73\xd9\xbb\xbd\xfb\xa4\x22\xe2\xc9\x94\xa2\xac\xda\xd3\xc5\x7e\x38\x11\xcf\xaf\xa2\x06\x2a\x49\xb8\x0c\xeb\x98\x4d\xbd\xab\xbf\x70\x37\xef\xd9\x5c\xbc\x00\xfe\x3e\xb3\xac\x61\xb5\x62\x0b\xca\xb2\x4a\xdb\x2e\xb4\x0a\x19\x6b\x6c\xba\x2d\xf6\xd4\xaf\x8b\xde\x71\x3a\x19\xeb\x79\xbe\x23\xa6\xd3\x58\x1c\xb0\x3b\x88\xa1\x0c\x59\x07\xf4\x94\xc9\xa9\x59\x28\x1e\x7e\x04\x5a\x1b\x2e\x43\x4e\xe1\x2a\x33\x3e\x37\xaf\x3d\xb7\x19\xab\xa8\xbd\xc3\x7f\x3a\x53\x5b\x9b\x50\x65\xa6\xe2\xdd\xb8\xd8\xd6\x73\x4e\xa4\xe8\x3f\xbb\x22\x51\x8f\xeb\x56\x23\x2d\x79\x82\x3d\x66\x99\x46\xba\xfd\xc0\x7e\x2a\xda\x0b\x19\xcd\x04\x61\x60\x14\xe5\x3d\x02\xc7\x13\x6c\x17\xb6\xb8\x9b\x2f\x41\xbc\x80\x23\x45\x80\x6f\xdf\xb6\xd2\x5a\x8a\xa0\x89\xe5\x0a\x69\x30\x42\xaa\x15\x1b\x9c\xcb\x3a\xcd\xe6\x2c\xda\x0b\x77\x59\xfd\xdf\xf1\x06\x7f\x03\x00\x00\xff\xff\xff\x8f\x04\x0b\x0e\x05\x00\x00")

func templatesLaunchdLaunchdPlistTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesLaunchdLaunchdPlistTmpl,
		"templates/launchd/launchd.plist.tmpl",
	)
}

func templatesLaunchdLaunchdPlistTmpl() (*asset, error) {
	bytes, err := templatesLaunchdLaunchdPlistTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/launchd/launchd.plist.tmpl", size: 1294, mode: os.FileMode(420), modTime: time.Unix(1584486757, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesRunitLogRunTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x8c\xcf\x0a\x82\x40\x10\x87\xef\xf3\x14\xbf\x2c\xbc\x6d\x46\x10\x9d\x3a\x7b\x11\x7c\x84\xa8\x75\x50\x49\xdd\xc5\x59\xfb\x83\xce\xbb\x87\xd0\x1e\xba\x7d\xcc\x37\xbf\x6f\xbb\xc9\xee\xed\x90\x49\x43\xc2\x01\x86\x89\x8a\x32\xbf\xcc\x33\xf6\x9d\xab\xa1\x6a\x56\xbc\x79\x1f\xd1\x8f\xce\xb2\xc8\x35\x7c\x3c\xc7\xdb\x30\xf5\x50\x25\x0a\x2c\x01\xa6\x42\xb2\x2b\xca\x3c\xc1\xb2\xa0\x7f\x54\xed\x08\xe3\x61\x7a\x1c\xcf\xa7\x43\x54\x69\x0a\xdb\xb8\xd7\x80\x75\x3e\x09\x8f\x50\xfd\x39\xe2\x37\x5b\xd8\xc6\xaf\xad\xe9\xef\x41\x9e\x9d\xab\x63\x9e\xbe\x01\x00\x00\xff\xff\x62\xdb\xaa\xfb\xba\x00\x00\x00")

func templatesRunitLogRunTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesRunitLogRunTmpl,
		"templates/runit/log/run.tmpl",
	)
}

func templatesRunitLogRunTmpl() (*asset, error) {
	bytes, err := templatesRunitLogRunTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/runit/log/run.tmpl", size: 186, mode: os.FileMode(420), modTime: time.Unix(1584486167, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesRunitRunTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x34\x8d\x4d\x0a\x02\x31\x0c\x46\xf7\x73\x8a\x88\xe0\xae\x16\x3d\x80\x57\x19\x6a\x1a\x9c\xa2\x4d\x4a\x7f\xd4\x61\xc8\xdd\xa5\x95\xd9\xbd\x17\xf2\xf8\x8e\x07\x7b\x0f\x6c\xcb\x32\xa1\x87\x6d\x83\xf3\x47\xf2\x33\xf0\x63\xf6\x21\x13\x56\xc9\x2b\xa8\x4e\xf4\x25\x84\xeb\xed\x74\xf9\x13\x2e\xa9\x54\x30\x6d\x04\xad\x50\x06\x55\x30\x34\xf4\x25\xe8\x6a\x10\x06\x55\xdb\xdd\xa5\x04\xaa\xa6\x63\xca\x82\x54\xca\x5c\xd7\x44\xfb\x8d\x5b\xec\x9f\xc4\xef\x51\xa3\xc4\xe8\xd8\xf7\xcd\x5f\x00\x00\x00\xff\xff\xb9\xe8\x41\x7e\x9a\x00\x00\x00")

func templatesRunitRunTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesRunitRunTmpl,
		"templates/runit/run.tmpl",
	)
}

func templatesRunitRunTmpl() (*asset, error) {
	bytes, err := templatesRunitRunTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/runit/run.tmpl", size: 154, mode: os.FileMode(420), modTime: time.Unix(1584472497, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesSystemdDefaultControlTargetTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8a\x0e\xcd\xcb\x2c\x89\xe5\x0a\x4f\xcc\x2b\x29\xb6\xad\xae\x56\x28\x4a\xcc\x4b\x4f\x55\x50\x29\x4b\xcc\x29\x4d\x55\xb0\xb2\x55\xd0\x2b\x28\xca\x4f\x4e\x2d\x2e\x4e\x2d\x56\xa8\xad\xad\xae\x86\xc9\xd4\xd6\x2a\x54\x57\x2b\xa4\xe6\xa5\x28\xd4\xd6\x72\x71\x45\x7b\xe6\x15\x97\x24\xe6\xe4\x40\xcc\x49\x4d\x71\xaa\xb4\xcd\x2d\xcd\x29\xc9\xd4\x2d\x2d\x4e\x2d\xd2\x2b\x49\x2c\x4a\x4f\x2d\xe1\x02\x04\x00\x00\xff\xff\x4f\xc2\xa4\x0c\x6a\x00\x00\x00")

func templatesSystemdDefaultControlTargetTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesSystemdDefaultControlTargetTmpl,
		"templates/systemd/default/control.target.tmpl",
	)
}

func templatesSystemdDefaultControlTargetTmpl() (*asset, error) {
	bytes, err := templatesSystemdDefaultControlTargetTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/systemd/default/control.target.tmpl", size: 106, mode: os.FileMode(420), modTime: time.Unix(1584472497, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesSystemdDefaultProgramServiceTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x92\x41\x6b\xdc\x30\x10\x85\xef\xfa\x15\x62\x49\xc9\xa5\x1b\x53\xe8\xa9\xe0\x5b\x36\x65\x69\x9a\x0d\x71\x96\x1c\x42\x58\x14\x69\xec\x88\xc8\x23\x33\x1a\x6f\xd6\x18\xfd\xf7\x22\x6d\xbd\x86\x6d\x7b\xe9\x6d\xfc\xe6\x9b\x67\xbd\x61\x9e\xb7\x68\xf9\x45\x8c\xe3\x52\xda\x5a\x5e\x19\x08\x9a\x6c\xc7\xd6\xa3\x8c\x51\x5c\xcf\x9f\xe5\x38\x9e\xb7\xc7\x51\x02\x9a\xc4\xdd\x2b\xe2\x4d\x9d\x11\xd5\x75\x32\xc6\x2b\x56\xd4\x00\x8b\x8a\x7d\xf7\xf4\x06\xb8\x45\x04\x30\x60\xca\x01\x82\x10\xcf\x15\xd0\xde\x6a\x78\x11\xdb\x00\x94\xc7\xfa\x00\x94\x9c\xbe\x93\xef\xbb\xac\x34\xa9\x4a\xd2\x93\xa7\x77\x8b\xcd\xb5\x25\xd0\xec\x69\xc8\xdd\x8f\xa3\xb8\x33\x93\x9a\xc8\x15\xee\x2d\x79\x6c\x01\xb9\xbc\xdf\x3c\x3c\x66\xb2\xf3\xc4\x7f\x34\xab\x63\x2b\x9c\x35\x6e\xac\x83\x72\x59\x00\xeb\xc2\x40\xad\x7a\xc7\xc5\x94\xe9\xdf\x64\x18\x82\xf6\x58\xdb\xa6\x98\xf3\xe7\x85\x92\xc2\x06\xe4\xc5\x3b\x0c\x9f\xe5\xc5\x5e\xb9\x1e\xe4\xb7\x52\x5e\x01\xee\xcf\xdf\xb3\x18\xc7\xcc\xc9\x18\xd3\xc3\x7e\xc3\x31\x2e\xc4\xbc\xe3\xd5\x01\x74\xc5\x8a\xb8\x2c\x5e\x2d\x16\xaf\x2a\xbc\xc9\xa5\xd3\xf2\x12\x0e\xa0\xe5\x52\xc9\xc5\x29\xd2\x42\xa6\x52\xfb\xb6\x55\x79\xf6\x52\x3c\x40\xc8\xa3\xca\x7d\xa8\x21\x4c\x9f\x15\xe8\xf2\xcb\xd7\x20\x2a\x56\x68\x14\x99\x35\x76\x3d\x97\xd8\x3b\x77\x92\x36\x3d\x27\x2d\xf9\x39\xdf\xc8\x18\x97\x73\xc8\x5c\x76\xe4\x35\x84\xb0\xe3\xa1\x83\x49\xc3\xbe\x4d\x65\x60\xe3\x7b\x4e\x73\x27\xbb\x15\x91\xa7\xff\x76\x03\xa2\xa3\xdb\x10\x9c\x6f\xd6\x06\x90\x6d\x6d\x81\xca\x4f\x28\x7e\x58\xe7\x7e\x7a\x03\x65\x6b\x0f\x60\xc4\xa3\x6d\xc1\xf7\x9c\xee\x2f\xa5\x4c\x3e\x7c\x94\xd2\x2e\x4f\xf7\x8e\x56\xa7\xff\x88\x3b\xab\x21\x43\x93\x30\xef\x7d\x42\x9d\x6d\x2d\xef\x7c\x07\xb8\xab\xad\x83\x7c\x3a\xb7\x49\xbb\xdb\xdc\xac\x6f\x57\xc7\x50\x7f\x61\x66\xa7\x5f\x01\x00\x00\xff\xff\x0e\xe4\xbe\x09\x6c\x03\x00\x00")

func templatesSystemdDefaultProgramServiceTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesSystemdDefaultProgramServiceTmpl,
		"templates/systemd/default/program.service.tmpl",
	)
}

func templatesSystemdDefaultProgramServiceTmpl() (*asset, error) {
	bytes, err := templatesSystemdDefaultProgramServiceTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/systemd/default/program.service.tmpl", size: 876, mode: os.FileMode(420), modTime: time.Unix(1584486168, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesSystemdUserDefaultProgramServiceTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x90\xb1\x8a\xe3\x30\x10\x86\x7b\x3d\x85\x9b\x2b\x63\x73\x70\xad\x9a\x23\x39\x48\x95\x23\xce\x92\x22\x84\x20\xa4\x89\x57\xac\x34\x12\xa3\x71\xb2\xc2\xf8\xdd\x17\xd9\x38\x61\x53\x6e\x37\xf3\xfd\xf3\xfd\xd8\x3a\xbd\xa1\xe5\xb3\x18\x86\x55\x65\xaf\x55\x6d\x20\x69\xb2\x91\x6d\xc0\x6a\x1c\xc5\xfa\xb9\xca\x61\x78\x8d\x87\xa1\x02\x34\xe5\xae\x12\xa7\x16\xe8\x66\x35\x9c\xc5\x31\xd0\x87\xc5\x6e\x6d\x09\x34\x07\xca\x93\x78\x9f\xe1\xc5\x2c\xb4\x58\x87\x1c\x41\x26\xeb\xa3\x03\xb1\xc1\x9b\xa5\x80\x1e\x90\xe5\xff\xdd\xfe\x30\x59\x31\x10\x97\xc3\x6f\x61\x3b\x47\xe9\x25\xf8\x67\x1d\xc8\x55\x89\xde\x83\x87\x6a\x1c\x9b\x5a\x07\xbc\xda\xae\x49\x39\x31\x78\xd3\xf4\x09\xa8\x79\xb8\x35\x3c\x5d\xb1\xf9\x04\xdd\xb2\x22\x9e\xba\x75\xf0\x5e\xcd\x3f\xb6\x87\x34\x61\xe5\xee\x2a\xa7\x65\x6d\x41\xcb\xdf\x7f\x92\x68\x59\xa1\x51\x64\xb6\x18\x7b\x96\xd8\x3b\xf7\x40\xbb\x9e\x0b\x2b\x75\x2e\x74\xd5\x38\x4e\x9f\xa6\x62\x5c\xc6\x48\x41\x43\x4a\x17\xce\x11\x16\x86\xbd\x2f\x63\x62\x13\x7a\x2e\xde\xa3\x6e\x43\x14\xe8\xc7\x6d\x40\x34\xb7\xe5\xe4\x42\xb7\x35\x80\x6c\xaf\x16\x48\xfe\x42\x21\x4e\x5b\x4c\xac\x9c\x3b\x8b\xa3\x42\x06\xf3\x37\x4b\xdf\x3b\xb6\xab\xf2\x5e\x35\x2b\xea\x80\xc5\x57\x00\x00\x00\xff\xff\xca\xbc\xfd\x10\x27\x02\x00\x00")

func templatesSystemdUserDefaultProgramServiceTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesSystemdUserDefaultProgramServiceTmpl,
		"templates/systemd-user/default/program.service.tmpl",
	)
}

func templatesSystemdUserDefaultProgramServiceTmpl() (*asset, error) {
	bytes, err := templatesSystemdUserDefaultProgramServiceTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/systemd-user/default/program.service.tmpl", size: 551, mode: os.FileMode(420), modTime: time.Unix(1584489411, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesSysvDefaultInitShTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x57\x6d\x73\xdb\x36\x12\xfe\xce\x5f\xb1\xa1\x34\x76\x92\xd3\x8b\xed\x5c\xef\x66\x9c\x71\x7a\x69\xe3\xf6\x34\x4d\x6c\x8f\xa5\x4e\x6f\xa6\xed\x28\x10\xb1\x14\x71\x22\x01\x16\x00\x2d\xab\xb6\xfe\xfb\xcd\x02\x20\x45\xda\x52\x2f\xbd\xcb\x07\x47\x04\x76\x9f\x5d\xec\xcb\x83\x45\xef\xc5\x78\x21\xe4\xd8\x64\x51\x0f\x26\x52\x58\x30\x89\x16\xa5\x85\x54\x69\x78\x78\x80\x11\x2b\x4b\xd8\x6e\x87\xf4\xb3\xd4\x2a\x41\x63\xe6\x76\x53\x62\xbd\x26\xab\x02\xb6\xdb\xa8\x07\x9f\x98\x90\x96\x09\x89\x1c\x16\x1b\xd2\x14\x29\x8c\x58\x65\x33\xa5\x61\xbb\x75\x48\xad\x0f\x94\xdc\xab\x7d\x8f\x12\x35\xb3\x5e\xab\xcc\x91\x19\xd4\x95\x1c\x91\x33\x45\x99\x63\x81\xd2\xed\x31\x83\x1c\x94\x84\x8f\xd3\x6f\xe0\x5b\xa5\x11\xde\x8c\x4e\xcf\xa3\x1e\x00\xbc\x86\x29\x26\x56\x28\x69\xce\xe1\xec\x64\x74\x36\xa0\xbf\x6f\xa2\x5e\xd4\xeb\xf5\xe0\x9b\xcb\xef\x27\x57\x30\xb9\x9a\xcc\x60\x72\xf5\xdd\x75\xd4\x83\x1b\xad\xee\x04\x47\x73\x0e\xcd\xbf\x3f\x73\xca\x5b\xfc\xad\x12\x1a\xf9\x70\x6a\x99\xb6\x0e\xa4\xaf\xb1\x50\x16\xe7\xa9\x81\xbe\xd9\x98\x5c\x2d\xbb\x72\xaa\xf4\xb6\xf6\xca\x7d\xc0\x94\x55\xb9\x6d\xc1\xc1\x19\xbc\x81\xbf\xc2\x57\x9d\xcd\x1a\x03\x4e\xe0\x14\xfe\x16\xf5\x60\x9a\x29\x6d\x87\x1f\xd0\x27\x4b\x28\x79\x5e\x87\x5c\x49\x9c\xe7\x42\xe2\x9c\xef\x36\x43\x02\x0e\x6f\x35\xe9\xe8\x20\xee\xc2\xd3\x55\x70\xa1\xbd\xbc\xfa\xd0\x0a\x6c\x74\xf3\x7e\xf6\xcf\x8b\xb1\x59\x08\x79\x3e\xae\x8c\x0e\xbf\x9a\xcf\x85\x90\x11\xde\x97\x4a\x5b\x20\xc9\x28\x92\xac\xc0\x8b\x2f\x8f\x7c\xa9\xd5\x52\xb3\xe2\x22\x88\xd1\xef\xed\x36\x62\x7a\x69\x3c\x88\x5e\x9a\x39\x9a\x84\x95\xe8\x0e\x52\x0a\x9e\x8a\x1c\x2f\xe2\xf1\x1d\xd3\x63\x5d\xc9\x71\x9f\x0c\x8e\x4a\xc1\xe3\xa8\x32\xa8\x2f\x62\x52\xa3\x5f\xb0\xdd\xc6\xd1\x52\xab\xaa\xf4\x6b\xee\xa7\x5b\x4c\x32\xad\x94\xf5\xab\x6b\xa5\x57\x42\x2e\xe7\x5c\x68\x4c\xac\xd2\x9b\x20\xc1\x85\xfe\x23\x01\x29\x12\xf4\xfb\xf4\x8b\x56\x1e\x1e\x86\x2e\x4d\xb9\x28\x84\x9d\x27\x4a\x23\xaf\x0a\xb2\x17\x75\x57\xbc\xd6\x33\xa9\x78\x97\xac\x27\x48\x65\x65\x45\x81\x2d\x20\xbf\xd0\xc1\x69\x64\x0e\xc2\x70\x66\xd9\x0e\x83\xbe\xda\x00\x61\xf7\xa0\x36\xc5\x7c\x6e\xc4\xef\x2d\x37\x9a\xa5\x36\x4e\x5b\xee\x20\x58\xae\x92\x15\xf2\x79\x81\x85\x8f\x66\xb4\x67\xb9\x0d\xfa\x54\xfe\x20\xb0\x2a\x51\x3a\x17\xcc\x0e\x75\xb7\xd6\x86\xec\x48\x1e\xc4\xa3\x2a\x9a\x87\xda\x6d\x63\x76\xd7\xdb\xb8\xcf\x34\x0e\x62\x97\xd9\xc6\x88\x84\xe5\xcf\xc2\xf0\x64\xa3\x8d\xfe\x5c\xe7\x20\xbc\xb1\x2c\x59\x3d\xc9\xd8\x6e\xad\x0d\xda\x91\x6c\xe1\x11\x51\xa7\x60\x33\x61\x40\x18\x30\x68\xc1\x2a\x38\x1d\x80\xcd\x50\xc2\x9a\xfe\x7c\x36\x56\x95\x9f\x69\x37\x61\x79\x8e\x7c\x40\xf6\x6d\x86\x10\x02\x00\x19\x33\x51\x0f\xa4\xb2\x80\xf7\x82\xd8\x7e\x2d\x6c\x26\x24\x30\xd0\xc8\x8c\x92\x6c\x91\x23\x50\xe1\x0e\x60\x3a\xf9\xfe\x87\xc9\xc7\x8f\xb0\x16\x79\x0e\x0b\x04\x83\xd2\x82\xc4\x7b\x4b\x17\xc6\x2c\x43\xe0\x9e\x32\x61\x81\x19\xbb\x13\x4a\x93\x59\xab\xc0\x88\xa2\xcc\x37\x90\xab\x25\x30\x28\xd0\x18\xb6\x44\x88\x03\x91\x00\x39\x08\x29\x13\x39\xf2\xb7\x60\x2c\x61\xeb\x4a\x4a\x21\x97\x71\x44\xe6\xe6\xd7\x57\xf3\xe9\xec\xfa\x66\x3e\x9b\x7c\xba\xbc\xfe\x71\x76\x71\x42\xc7\xfe\x89\x0e\x97\x2b\xc6\x85\x5c\x36\x76\x99\xe4\x60\x36\x26\x51\x32\x15\x4b\x70\xa5\x33\x80\x35\x42\x65\x10\x3e\x53\x74\x86\xec\x33\x39\x54\xb0\x15\x46\x3d\x60\x79\x0e\x77\x4c\x0b\x3a\xa2\x01\x56\x59\x55\x30\x4b\xb9\xcb\x37\x20\xa4\x55\x80\xf2\x4e\x68\x25\xe9\x1a\xdc\x09\x8e\x22\x8f\x14\xfd\x0c\x43\x0d\x63\xb4\xc9\x38\xd8\x1f\xd7\x8c\x0a\xdb\x2d\xfc\x0a\x47\x47\x30\x3a\xb8\xdf\xd2\x6e\x3c\x1e\xef\x18\xb9\xa3\xbe\x4f\xc0\x39\xf1\x17\xd6\xd0\xfa\xf5\xed\xcc\xd3\x33\x7d\x6d\xb7\xcd\xfa\xd4\xaf\xba\xc6\x20\x9b\xbf\x43\xdc\x27\x36\x8c\xbd\x05\x47\x91\x27\x51\x64\x35\x4b\xf0\xe5\x2b\x78\x88\x80\xf2\xb4\x44\x0d\x43\x0b\xb1\x33\x2f\xa4\xb0\x23\x3e\xfe\xe2\xeb\x22\x86\xb8\xff\x8f\x38\xda\x46\x11\x16\xc2\x06\x50\x67\xc0\x6f\x00\x60\x92\xa9\x46\xc8\xd0\xe5\x1b\xa4\x1e\x1e\xc6\xaf\x61\x02\x5c\xb9\x82\xa4\xb4\x1d\x9b\xea\x18\x32\xd4\x48\x79\xd3\x95\x04\x66\x80\x01\x17\x69\x8a\x9a\xd2\xe2\x2e\x91\x05\x26\x8c\x84\xdb\x75\x4d\x8a\x91\xbf\x43\x8d\x65\x1b\x43\x8a\x6e\x9f\x91\xde\x00\x48\x83\x6a\x47\x55\x1a\xc2\x85\x45\x26\x12\xe5\xe6\x28\x2f\x2a\x38\xa8\xd4\xbb\x40\xfe\xd8\x0c\x03\x62\x5d\xbb\x6b\xa4\x42\x41\xc9\x91\x07\xff\x46\xf0\xb1\x4a\x56\x22\xdf\xb8\x26\x84\x63\x7f\x8d\x1d\x37\x1a\x4a\xc2\xf5\xf4\x5f\x03\xf8\x4e\x23\x7e\x33\xfd\x30\x70\x35\xfb\x51\xc8\xea\x3e\x40\x53\x51\x9a\xaa\x74\xd9\x33\x6b\x61\x93\x8c\xbc\xa4\x63\x1a\x27\x2b\x2c\x08\x79\xa7\x56\x68\x00\xef\x31\xb9\x43\x10\x45\x81\x5c\x30\x8b\xf9\x06\x58\x6a\x51\x83\x37\x2a\xe4\x72\x04\xaf\xc7\x94\x78\x80\x1e\x5c\x4a\x53\x69\x1f\x23\xea\xc4\xdd\x55\xe9\x99\xa3\x2a\x21\x51\x9a\xd6\xf2\xcd\x28\x02\xa2\x89\x9f\xe1\x05\x0c\x39\x78\x1e\x52\x4b\x70\xb9\xfd\xf5\xad\x67\x17\xe7\x6e\xb1\xe2\x42\x77\x05\xdc\x7a\x92\xa9\xb5\x84\xb8\x4f\x6e\xc7\xe7\x71\xdf\x5d\xeb\xf1\x5e\xc1\x42\x71\xf8\xfb\x57\x5f\x3d\xdb\x4b\x45\xe4\x0a\xc2\x13\x66\xa9\xd1\xd5\x09\x95\x71\xf0\x2d\xee\xdf\xdc\x5e\x4e\x67\xef\x6f\x67\x31\xbc\xb8\x80\x58\x2a\xaa\x69\xef\x9d\xc3\x76\xdc\xd8\x28\x12\xc3\x98\x01\xb0\x85\x0b\x2c\x2d\x8d\x22\x9f\xca\x20\xf0\xf8\x08\x1a\x6d\xa5\x25\xf4\xbf\xf6\xf6\xdd\xf4\x55\x33\x2d\xe1\x4d\x5d\x98\x98\xdc\xb4\x99\x81\xe5\x60\x6c\x95\xa6\xb0\xc0\x54\x69\xcc\x98\xe4\x5e\x93\xfc\xae\x02\x7f\x67\x98\xe7\x61\x0e\x7c\xbe\xd4\x36\x71\x5b\xc9\xba\x8c\xa9\x5e\x5e\xb4\x62\x40\xbd\x0a\xdb\xad\xfb\x6f\x28\xeb\x3e\xde\xe9\x43\xc8\x3b\x0c\x87\xae\x5c\x4a\x4c\xf6\xa4\xa0\xef\x85\x62\x30\x19\x0c\x13\xf0\x69\xf8\x1f\xbc\x75\xd9\xe3\xf0\x0b\x01\x72\xa1\x7f\xf1\x40\x54\x92\xb4\x16\xdc\xff\x25\x86\x3e\x4d\x87\x11\x40\x0c\xef\xde\x41\x9d\xe3\xc0\x17\x5f\x44\x27\x43\x63\xb9\xaa\xac\xd3\x3b\xfb\x3f\x30\x50\x6b\xa7\x77\xe4\x03\x5d\x3f\x7d\xea\x4e\x77\x04\x90\x6a\x55\x38\xb6\x19\x51\xed\xb8\xee\x36\x16\x19\x87\x82\x71\x2f\x99\x2a\xbd\x42\x5e\xb3\x8c\x43\x5a\xd6\x48\xc2\x51\x84\xc6\xe6\x82\x64\xe0\x58\x2f\x51\x92\x0b\x37\xbd\x2f\xd0\xae\x11\x65\xc7\xe6\x5a\x0b\x6a\x55\x07\x45\x0d\xce\x1a\x0a\x2b\x95\x31\x62\x41\x5d\x6d\x68\xba\x75\x8f\x42\x63\x99\xad\xcc\xa8\x26\xd1\xfe\x0b\x78\x07\xfd\x00\x45\x07\x23\xca\xa5\xd2\x60\x05\xfa\x2a\x47\x4e\x99\x09\x95\x7d\xe2\x09\x57\x95\x81\x6f\x7b\x30\xd3\x1b\x60\x90\xe2\xda\xdd\xf1\xee\xba\x5e\x91\xf7\xb3\xcb\xdb\x4f\xed\x42\xf4\x5d\xe7\xad\xb7\x9b\xac\x14\xfc\xa2\xff\x32\x61\x64\x34\xb8\x11\xbf\x72\x3b\x81\xf1\x7f\x10\x79\x4e\xce\x7b\x97\x5e\x12\xa7\x92\xe0\x2b\x37\x67\xd0\x48\x41\x96\x7c\xf1\x38\xc3\x43\x67\x99\x44\x42\x13\xff\xc4\x84\x7f\x0f\x0b\x37\xdd\xd0\x94\xe2\x3b\xd7\xad\x81\x90\x70\x5a\xbf\xda\xe0\x2d\x70\x15\x78\x34\x98\x27\xed\xbd\xe6\xad\x02\x2e\x70\x34\x1a\xc5\xbb\x5b\x82\xce\xf6\xf8\x08\x0b\x8d\x6c\x55\xaf\xe6\x88\x25\x9c\xba\x2f\xae\xa4\xbf\x00\xf6\x46\xa2\xa1\xa5\x7d\x43\x4b\x0c\x43\xfc\x0d\x4e\xbb\x04\xd5\x72\x73\x26\x0a\x54\x95\xa5\x99\x2b\xc9\x90\x8f\xe0\xbf\x86\x8d\xac\x8c\x00\x66\x34\xfb\x15\x6c\x03\x1a\x0d\x8d\x40\x42\x82\x7b\x27\xe4\xca\x98\xe6\x68\x75\x68\xdd\xf4\xd6\x84\xd6\xf5\x6b\xab\x5c\x48\x26\xcc\x7f\x8d\x81\x1a\x01\x73\x83\x7b\x95\x0e\x4f\x6f\x8d\xae\x63\xd2\x0e\xc4\x53\x80\x12\x79\x90\x76\xb2\xa9\x08\x73\x81\xad\x4c\x28\x54\x17\xda\x61\xda\x2a\xb2\x6e\x28\x0f\x97\xa1\x48\xa1\x34\x30\x2c\xdd\xb9\xe1\x1d\x8c\x39\xde\x8d\x65\x95\xe7\x70\xd6\xfe\xe8\xa4\xa5\xd7\xb4\xe0\x62\xe3\xa7\x6b\xd2\x15\xa6\x39\x5a\x23\x37\xb1\x2e\xf8\x34\x1d\x2c\xb0\x9e\x25\x06\xb0\xa8\x88\x0a\x98\x3d\x36\xb0\xce\x98\x85\x8d\xaa\x60\x89\xd6\xc7\xf6\xdf\x95\xb1\x75\xf7\x9b\x1d\xd4\xec\xfa\xc3\xf5\x4b\x23\x8c\xc1\xfc\xd5\x39\x7c\x9b\x61\xb2\xf2\xb3\x3a\x99\x0f\xee\x18\xc4\xc2\xf5\xe8\xc2\xb3\x91\xa1\x08\x86\xc1\x46\x49\x84\x35\x36\x70\x78\x5f\x62\x62\x47\x30\xb1\xc7\x9c\xc4\xdd\xb5\x61\x95\x1b\xaa\x52\x7a\xad\x39\x9e\xf3\xae\xfa\xef\x8a\x5e\x43\xc4\x6f\x83\xf0\x1c\xc0\x64\xd0\xc0\x19\x45\xfd\x47\x83\xb3\xa1\x1f\xbf\x55\xc2\x22\xb0\xf5\x6a\xcd\x34\xaf\x61\xdd\xd8\xe4\x5e\x1a\x06\xeb\x73\x35\xc4\xf3\xa4\x04\xc2\xfa\x99\x8f\xb5\x1b\x8d\x84\x01\x4e\x5c\x4b\x1e\x51\xbc\x1d\x3b\xe2\xbd\x30\xd6\xec\x6a\xa3\x81\x08\x00\x6f\xba\x00\xe4\x78\x48\x52\x53\x48\xa9\xd2\x09\xce\x5b\xac\xb7\xb7\x7d\x69\x3f\x6a\xf1\xc0\xd1\x51\xa7\x69\xf6\xd4\x96\x47\xdf\x37\xa1\xd4\xbf\x9b\xa9\xb6\xbb\x1d\xd5\x46\x2e\xfa\x5f\x47\x75\x71\xf7\x83\xdd\xe1\xd2\xc2\x49\xb7\xb8\x7d\xbb\xdc\xd4\x08\x89\x2a\x0a\xba\x28\x7c\xd7\xf9\x9a\x4a\x14\xc7\x1a\xc2\xdd\x5d\x54\x71\x6b\x61\x32\xf7\xfe\x5a\x89\x32\x70\x79\x17\x62\xe0\x9e\x8c\xf5\x18\x75\x21\x15\xa5\x70\x43\x55\xdc\x9a\x6f\x46\x71\x3d\x0d\xd5\xe3\x91\x37\x13\xd1\x73\xb6\x99\x5d\x28\xe7\x10\xf7\x4f\x63\x10\xe4\xb4\x8b\xf9\xd0\x19\x7b\xac\xff\xaa\xf2\xb1\x5e\x56\xe5\x63\x70\xa5\x73\x57\xbc\xb7\x16\x8b\xd2\xf1\xf5\x71\xff\xf4\x98\x86\xe5\x2f\x7f\x75\x38\xa0\xb7\x6f\x23\x34\x2c\xf9\x23\x7f\xbc\xc5\xd6\xa1\x77\x83\x4b\xdc\x3f\x89\xfd\xad\x59\x83\x01\xb4\x74\xc2\xb9\xdd\xe4\xa3\x38\x5e\xb8\x39\xb1\x4e\x9f\xcb\x00\x91\xfc\x49\x3d\x22\xef\x21\x3b\x61\x80\xe5\x1a\x19\xdf\xec\xde\xb8\x41\xea\x5e\x58\x0f\xf2\xb4\x53\x76\xfe\xd4\x52\x5f\x47\x2d\x5a\x0d\x4e\xaa\xf2\x95\xe7\x62\xf7\xbd\x8b\xf3\x2b\xd8\x95\x7f\x73\x20\x5b\x99\x3f\x79\x22\xf8\xa3\x23\x75\x8e\x72\x80\xe6\xbb\xbd\x19\xb7\x4f\xf0\xe4\xe8\xce\xc9\x4e\x75\x3c\x6d\xb1\xed\xf6\xcb\x1e\x00\xdd\xe1\xbe\x1b\xbb\xee\x20\xeb\xa2\x73\x74\xf4\x34\xf7\xaf\xbd\x7d\xff\x5c\xfd\xd1\xb0\x25\x9e\x43\x7f\xfa\xed\xed\xe4\x66\x76\xf5\xfe\xd3\x25\x3c\xf8\xd2\xee\x16\x7b\xab\xcc\xdb\x9b\xaa\x7c\xf4\xd1\xae\x2b\x7f\x1b\xc3\xbb\xa3\xb3\x5d\x04\xde\x44\xad\xf2\xad\x9d\xfd\x4f\x00\x00\x00\xff\xff\x93\x92\x86\x60\x20\x18\x00\x00")

func templatesSysvDefaultInitShTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesSysvDefaultInitShTmpl,
		"templates/sysv/default/init.sh.tmpl",
	)
}

func templatesSysvDefaultInitShTmpl() (*asset, error) {
	bytes, err := templatesSysvDefaultInitShTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/sysv/default/init.sh.tmpl", size: 6176, mode: os.FileMode(420), modTime: time.Unix(1584486952, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesUpstartDefaultControlConfTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4a\x49\x2d\x4e\x2e\xca\x2c\x28\xc9\xcc\xcf\x53\xa8\xae\x56\xd0\x4b\x2c\x28\x50\xa8\xad\xe5\xe2\x2a\x2e\x49\x2c\x2a\x51\xc8\xcf\x53\xd0\x00\xb3\x52\x53\x14\xf2\x52\x4b\xca\xf3\x8b\xb2\x33\xf3\xd2\x35\xb9\x8a\x4b\xf2\x0b\x40\x92\x45\xa5\x79\x39\xa9\x65\xa9\x39\x0a\xd1\x06\x66\xb1\x5c\x80\x00\x00\x00\xff\xff\x88\x35\x19\x59\x4c\x00\x00\x00")

func templatesUpstartDefaultControlConfTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesUpstartDefaultControlConfTmpl,
		"templates/upstart/default/control.conf.tmpl",
	)
}

func templatesUpstartDefaultControlConfTmpl() (*asset, error) {
	bytes, err := templatesUpstartDefaultControlConfTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/upstart/default/control.conf.tmpl", size: 76, mode: os.FileMode(420), modTime: time.Unix(1584472497, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesUpstartDefaultProcessTypeConfTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\xcb\x31\x0a\x42\x41\x0c\x84\xe1\x3e\xa7\x98\x52\x0b\xc5\xca\xcb\x88\xc8\x63\x0d\xb2\xb0\x24\x21\x89\x82\x2c\xb9\xbb\xac\x95\x76\x3f\x7c\x33\x77\x8e\xe6\xdd\xb2\xab\x60\x4e\x1c\x37\x33\x54\x1d\x56\x9a\x6b\xe3\x88\x5b\xbe\x8d\x51\x45\x14\xb9\x79\x42\x05\xdf\xe8\xf2\xf8\x79\x50\xa4\xda\xb2\x9d\x3f\x65\xf0\x8b\x07\x2e\xa7\xf3\x15\xea\x58\x62\xff\xeb\x3d\x7d\x02\x00\x00\xff\xff\xc1\x84\x51\xbe\x78\x00\x00\x00")

func templatesUpstartDefaultProcessTypeConfTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesUpstartDefaultProcessTypeConfTmpl,
		"templates/upstart/default/process-type.conf.tmpl",
	)
}

func templatesUpstartDefaultProcessTypeConfTmpl() (*asset, error) {
	bytes, err := templatesUpstartDefaultProcessTypeConfTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/upstart/default/process-type.conf.tmpl", size: 120, mode: os.FileMode(420), modTime: time.Unix(1584472497, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesUpstartDefaultProgramConfTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x52\xc1\x4e\x1b\x31\x10\xbd\xfb\x2b\xde\x01\x01\x51\xb5\xd9\xb6\xb7\x1e\xc8\x89\x0b\xa7\x46\x6d\x6f\x14\xc1\xca\x9e\x6c\xac\x12\x8f\x35\x33\x5b\x1a\xc1\xfe\x7b\xe5\xdd\xa4\x80\x9a\xa8\x2b\x95\x9b\xfd\x66\xe6\xf9\xbd\xe7\x09\xa4\x5e\x62\xb6\xc8\x09\x8f\x8f\x98\x37\x39\xa3\xef\xab\x72\xcc\xc2\x9e\x54\x6f\x6d\x9b\x69\x8f\xa5\x6e\x83\xbe\x77\x4e\xad\x11\x03\x27\x9c\x0f\xa7\x98\xda\x7f\x4c\x83\x05\x07\x5a\x67\x4e\x8d\xf3\x8e\x88\x73\x9e\x4a\xf4\x57\xeb\xcc\x39\x25\xeb\x62\x18\xb0\x4e\x49\x8a\x4e\x25\x6b\x77\x50\x2b\xdc\x95\x46\xe7\xd7\x21\x0a\x06\xec\x81\xe5\x47\x4c\xed\x6d\x88\x42\xde\x58\xb6\xa5\x2e\xa4\xb9\x79\x48\xce\x8d\xc1\x38\x80\x7e\x65\x16\xc3\xf2\xf3\x97\x6f\x17\x83\xa2\x72\xeb\xfb\x17\x95\xaf\x23\xae\x23\x7a\x8d\x4a\x50\x93\xf9\x3a\xd0\xaa\xe9\xee\xad\xde\xeb\x2c\xfa\x6f\x70\x7a\x8a\xf9\xd1\xfa\xab\x79\xdd\xaa\xe7\xb4\x8a\x6d\xfd\xec\xf4\x15\xc1\xa1\x06\x07\xf8\x70\xdc\x5f\x51\x4d\x7e\xa8\x7b\xde\x6c\x9a\x14\x0a\xe9\x77\x07\x00\x8b\xc5\x80\xdf\x73\xbb\x4f\x7f\xd2\x3e\x54\x6a\x81\x3b\x1b\xe6\x46\xa2\x8f\xff\xc1\x44\x22\x65\xce\x51\x0a\xd8\xfd\x81\xcb\xac\x56\x8d\x4b\xf7\xe7\x5b\x96\x57\x97\x17\x77\x6a\x8d\x75\x3a\x7d\x75\xf1\x04\x6a\x85\x32\x2a\x8e\x38\x3b\xbf\x7e\x5f\x7d\xba\x79\x37\x3b\x39\xc3\x13\xd6\xd4\x04\x54\xe9\xc3\x5d\x89\xc8\xaf\x19\x27\xcb\xab\x4b\x2c\x50\xff\x6c\xa4\x96\x2e\xbd\x88\xb8\x9e\xfc\xde\x3c\xc7\x70\xc8\x09\xe7\x67\x23\xb2\x41\xb5\x7a\xdb\x67\x7e\x07\x00\x00\xff\xff\xc2\x40\xab\xd2\xd7\x03\x00\x00")

func templatesUpstartDefaultProgramConfTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesUpstartDefaultProgramConfTmpl,
		"templates/upstart/default/program.conf.tmpl",
	)
}

func templatesUpstartDefaultProgramConfTmpl() (*asset, error) {
	bytes, err := templatesUpstartDefaultProgramConfTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/upstart/default/program.conf.tmpl", size: 983, mode: os.FileMode(420), modTime: time.Unix(1584486170, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/launchd/launchd.plist.tmpl":                templatesLaunchdLaunchdPlistTmpl,
	"templates/runit/log/run.tmpl":                        templatesRunitLogRunTmpl,
	"templates/runit/run.tmpl":                            templatesRunitRunTmpl,
	"templates/systemd/default/control.target.tmpl":       templatesSystemdDefaultControlTargetTmpl,
	"templates/systemd/default/program.service.tmpl":      templatesSystemdDefaultProgramServiceTmpl,
	"templates/systemd-user/default/program.service.tmpl": templatesSystemdUserDefaultProgramServiceTmpl,
	"templates/sysv/default/init.sh.tmpl":                 templatesSysvDefaultInitShTmpl,
	"templates/upstart/default/control.conf.tmpl":         templatesUpstartDefaultControlConfTmpl,
	"templates/upstart/default/process-type.conf.tmpl":    templatesUpstartDefaultProcessTypeConfTmpl,
	"templates/upstart/default/program.conf.tmpl":         templatesUpstartDefaultProgramConfTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"launchd": &bintree{nil, map[string]*bintree{
			"launchd.plist.tmpl": &bintree{templatesLaunchdLaunchdPlistTmpl, map[string]*bintree{}},
		}},
		"runit": &bintree{nil, map[string]*bintree{
			"log": &bintree{nil, map[string]*bintree{
				"run.tmpl": &bintree{templatesRunitLogRunTmpl, map[string]*bintree{}},
			}},
			"run.tmpl": &bintree{templatesRunitRunTmpl, map[string]*bintree{}},
		}},
		"systemd": &bintree{nil, map[string]*bintree{
			"default": &bintree{nil, map[string]*bintree{
				"control.target.tmpl":  &bintree{templatesSystemdDefaultControlTargetTmpl, map[string]*bintree{}},
				"program.service.tmpl": &bintree{templatesSystemdDefaultProgramServiceTmpl, map[string]*bintree{}},
			}},
		}},
		"systemd-user": &bintree{nil, map[string]*bintree{
			"default": &bintree{nil, map[string]*bintree{
				"program.service.tmpl": &bintree{templatesSystemdUserDefaultProgramServiceTmpl, map[string]*bintree{}},
			}},
		}},
		"sysv": &bintree{nil, map[string]*bintree{
			"default": &bintree{nil, map[string]*bintree{
				"init.sh.tmpl": &bintree{templatesSysvDefaultInitShTmpl, map[string]*bintree{}},
			}},
		}},
		"upstart": &bintree{nil, map[string]*bintree{
			"default": &bintree{nil, map[string]*bintree{
				"control.conf.tmpl":      &bintree{templatesUpstartDefaultControlConfTmpl, map[string]*bintree{}},
				"process-type.conf.tmpl": &bintree{templatesUpstartDefaultProcessTypeConfTmpl, map[string]*bintree{}},
				"program.conf.tmpl":      &bintree{templatesUpstartDefaultProgramConfTmpl, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
